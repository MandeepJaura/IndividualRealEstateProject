//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FavouritePropertyDB
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FavouriteList", Namespace="http://schemas.datacontract.org/2004/07/FavouriteProperty")]
    public partial class FavouriteList : object
    {
        
        private System.Nullable<int> HomeListingIDField;
        
        private int IdField;
        
        private System.Nullable<int> UserIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> HomeListingID
        {
            get
            {
                return this.HomeListingIDField;
            }
            set
            {
                this.HomeListingIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> UserId
        {
            get
            {
                return this.UserIdField;
            }
            set
            {
                this.UserIdField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="FavouritePropertyDB.IFavouritePropertyDB")]
    public interface IFavouritePropertyDB
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFavouritePropertyDB/GetAllFavtProperty", ReplyAction="http://tempuri.org/IFavouritePropertyDB/GetAllFavtPropertyResponse")]
        FavouritePropertyDB.FavouriteList[] GetAllFavtProperty();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFavouritePropertyDB/GetAllFavtProperty", ReplyAction="http://tempuri.org/IFavouritePropertyDB/GetAllFavtPropertyResponse")]
        System.Threading.Tasks.Task<FavouritePropertyDB.FavouriteList[]> GetAllFavtPropertyAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFavouritePropertyDB/GetByUserId", ReplyAction="http://tempuri.org/IFavouritePropertyDB/GetByUserIdResponse")]
        FavouritePropertyDB.FavouriteList[] GetByUserId(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFavouritePropertyDB/GetByUserId", ReplyAction="http://tempuri.org/IFavouritePropertyDB/GetByUserIdResponse")]
        System.Threading.Tasks.Task<FavouritePropertyDB.FavouriteList[]> GetByUserIdAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFavouritePropertyDB/Add", ReplyAction="http://tempuri.org/IFavouritePropertyDB/AddResponse")]
        void Add(int userId, int propertyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFavouritePropertyDB/Add", ReplyAction="http://tempuri.org/IFavouritePropertyDB/AddResponse")]
        System.Threading.Tasks.Task AddAsync(int userId, int propertyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFavouritePropertyDB/Delete", ReplyAction="http://tempuri.org/IFavouritePropertyDB/DeleteResponse")]
        void Delete(FavouritePropertyDB.FavouriteList fList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFavouritePropertyDB/Delete", ReplyAction="http://tempuri.org/IFavouritePropertyDB/DeleteResponse")]
        System.Threading.Tasks.Task DeleteAsync(FavouritePropertyDB.FavouriteList fList);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface IFavouritePropertyDBChannel : FavouritePropertyDB.IFavouritePropertyDB, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class FavouritePropertyDBClient : System.ServiceModel.ClientBase<FavouritePropertyDB.IFavouritePropertyDB>, FavouritePropertyDB.IFavouritePropertyDB
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public FavouritePropertyDBClient() : 
                base(FavouritePropertyDBClient.GetDefaultBinding(), FavouritePropertyDBClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IFavouritePropertyDB.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public FavouritePropertyDBClient(EndpointConfiguration endpointConfiguration) : 
                base(FavouritePropertyDBClient.GetBindingForEndpoint(endpointConfiguration), FavouritePropertyDBClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public FavouritePropertyDBClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(FavouritePropertyDBClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public FavouritePropertyDBClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(FavouritePropertyDBClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public FavouritePropertyDBClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public FavouritePropertyDB.FavouriteList[] GetAllFavtProperty()
        {
            return base.Channel.GetAllFavtProperty();
        }
        
        public System.Threading.Tasks.Task<FavouritePropertyDB.FavouriteList[]> GetAllFavtPropertyAsync()
        {
            return base.Channel.GetAllFavtPropertyAsync();
        }
        
        public FavouritePropertyDB.FavouriteList[] GetByUserId(int userId)
        {
            return base.Channel.GetByUserId(userId);
        }
        
        public System.Threading.Tasks.Task<FavouritePropertyDB.FavouriteList[]> GetByUserIdAsync(int userId)
        {
            return base.Channel.GetByUserIdAsync(userId);
        }
        
        public void Add(int userId, int propertyId)
        {
            base.Channel.Add(userId, propertyId);
        }
        
        public System.Threading.Tasks.Task AddAsync(int userId, int propertyId)
        {
            return base.Channel.AddAsync(userId, propertyId);
        }
        
        public void Delete(FavouritePropertyDB.FavouriteList fList)
        {
            base.Channel.Delete(fList);
        }
        
        public System.Threading.Tasks.Task DeleteAsync(FavouritePropertyDB.FavouriteList fList)
        {
            return base.Channel.DeleteAsync(fList);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IFavouritePropertyDB))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IFavouritePropertyDB))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:52908/FavouritePropertyDB.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return FavouritePropertyDBClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IFavouritePropertyDB);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return FavouritePropertyDBClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IFavouritePropertyDB);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IFavouritePropertyDB,
        }
    }
}
